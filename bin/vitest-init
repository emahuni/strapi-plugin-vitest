#!/usr/bin/env node

const { copy: fseCopy, ensureDir, move, pathExists, remove, readFileSync, ensureSymlink } = require('fs-extra');
const { resolve } = require('path');
const chalk = require('chalk');
const paths = require('../paths.js');
const { modifyPackageJsonFile } = require('modify-json-file');
// noinspection NpmUsedModulesInstalled
const { preferredPackageManager } = require('@emanimation/strapi-utils');

const pkg = JSON.parse(readFileSync(resolve(paths.PLUGIN_DIR_PATH, './package.json'), { encoding: 'utf8' }));
ensureDependenciesProps(pkg);
const prjPkg = JSON.parse(readFileSync(resolve(paths.CWD, './package.json'), { encoding: 'utf8' }));
ensureDependenciesProps(prjPkg);
const isPrjPlugin = prjPkg?.strapi?.kind === 'plugin';

const SERIAL = Date.now();


function log (str, ...rest) {
  console.log(chalk`{dim 🛠  [${pkg.name}]:} ${str}`, ...rest);
}


function log_warn (str, ...rest) {
  console.warn(chalk`{dim ⚠️  [${pkg.name}]:} ${str}`, ...rest);
}


function log_err (str, ...rest) {
  console.error(`{dim ❌  [${pkg.name}]:} ${str}`, ...rest);
}


async function copy (sourcePath, targetPath, checkIfExists = true) {
  let exists;
  if (checkIfExists) {
    try {
      exists = await pathExists(targetPath);
    } catch (err) {
      log_err(`Error checking if %o exists`, targetPath);
    }
  }
  
  if (!checkIfExists || !exists) {
    if (checkIfExists) log(`%o doesn't exists, adding...`, targetPath);
    log(`Copying to: %o...`, targetPath);
    try {
      await fseCopy(sourcePath, targetPath);
    } catch (err) {
      log_err(err);
    }
  } else {
    log_warn(`%o exists, NOT copying.`, targetPath);
  }
}


async function renameIfExistsAndCopy (sourcePath, targetPath) {
  let exists;
  try {
    exists = await pathExists(targetPath);
  } catch (err) {
    log_err(`Error checking if %o exists`, targetPath);
  }
  
  if (!!exists) {
    const i = targetPath.lastIndexOf('.');
    const bck = ~i ? targetPath.substring(i, -1) + '.' + SERIAL + targetPath.substring(i) : targetPath + '.' + SERIAL;
    log(`%o exists, renaming to %o so you can migrate any customizations before deleting it...`, targetPath, bck);
    try {
      await move(targetPath, bck);
    } catch (err) {
      log_err(err);
    }
  }
  
  log(`Copying to: %o...`, targetPath);
  try {
    await fseCopy(sourcePath, targetPath);
  } catch (err) {
    log_err(err);
  }
}




async function initTestHarness () {
  console.info(chalk`{bold   Emanimation {magenta Strapi} {yellow Vitest} {green Harness}.}`);
  let pm = preferredPackageManager();
  
  if (pm) {
    console.info('\n');
    log('Detected %o package manager as the preferred package manager...', pm);
  } else {
    log_warn(`Couldn't find lock file to determine package manager. Please run install to generate a lock file first.\nAssuming npm as the preferred package manager.`);
    pm = 'npm';
  }
  
  console.info('\n');
  
  try {
    await ensureDir(paths.TEST_DIR_PATH);
  } catch (err) {
    log_err(`Error checking if %o dir exists!`, paths.TEST_DIR_PATH);
  }
  
  await copy(
      paths.PLUGIN_HARNESS_PATH,
      paths.TEST_DIR_HARNESS_PATH,
      false,
  );
  if (await pathExists(resolve(paths.TEST_DIR_HARNESS_PATH, 'vitest-init.js'))) {
    log('Removing redundant %o file...', resolve(paths.TEST_DIR_HARNESS_PATH, 'vitest-init.js'));
    await remove(resolve(paths.TEST_DIR_HARNESS_PATH, 'vitest-init.js'));
  }
  
  if (isPrjPlugin) {
    await copy(
        paths.PLUGIN_HARNESS_TEST_APP_DIR,
        paths.TEST_APP_DIR,
        false,
    );
    // let's correct the symlink to the utils file
    await remove(resolve(paths.TEST_APP_DIR, 'src/utils/strapi-test-utils.ts'));
    await ensureSymlink(resolve(paths.TEST_DIR_HARNESS_PATH, 'strapi-test-utils.ts'), resolve(paths.TEST_APP_DIR, 'src/utils/strapi-test-utils.ts'));
    
    await copy(
        paths.PLUGIN_HARNESS_PLUGIN_TESTS_PATH,
        paths.APP_PLUGIN_TEST_PATH,
        false,
    );
  } else {
    try {
      await ensureDir(paths.TEST_ENV_DB_CONFIG_DIR);
    } catch (err) {
      log_err(`Error checking if %o dir exists!`, paths.TEST_ENV_DB_CONFIG_DIR);
    }
    
    await copy(
        paths.PLUGIN_HARNESS_DB_CONFIG_FILE,
        paths.TEST_ENV_DB_CONFIG_FILE,
        true,
    );
    
    await copy(
        paths.PLUGIN_HARNESS_APP_TESTS_PATH,
        paths.APP_TEST_PATH,
        false,
    );
  }
  
  await copy(
      paths.PLUGIN_HARNESS_VITEST_CONFIG_FILE,
      paths.VITEST_CONFIG_FILE,
      false,
  );
  const peerDeps = [];
  const peerDevDeps = [];
  const prjDeps = Object.keys(prjPkg.dependencies);
  const prjDevDeps = Object.keys(prjPkg.devDependencies);
  Object.entries(pkg.peerDependencies)
        .filter(p => {
          return isPrjPlugin || !p[0].includes('@strapi');
        })
        .forEach(p => {
          const [name, version] = p;
          // check if the dependency is already defined in the prjPkg (in both devDependencies & dependencies sections)
          // and just update the version, except for actual strapi packages
          if (prjDeps.includes(name)) {
            if (!/^@strapi/.test(name)) {
              // todo check if our version is compatible with the current version, complain if not
              peerDeps.push(name + '@' + version);
            }
          } else if (prjDevDeps.includes(name)) {
            if (!/^@strapi/.test(name)) {
              // todo check if our version is compatible with the current version, complain if not
              peerDevDeps.push(name + '@' + version);
            }
          } else {
            // otherwise just add to devDependencies
            peerDevDeps.push(name + '@' + version);
          }
        });
  
  
  await remove(resolve(paths.TEST_APP_DIR, 'dist')).catch(console.error);
  await remove(resolve(paths.TEST_APP_DIR, '.cache')).catch(console.error);
  await remove(resolve(paths.TEST_APP_DIR, 'node_modules')).catch(console.error);
  
  const peersDepsCmd = pm === 'npm' ? `npm install -D ${peerDeps.join(' ')}` : `${pm} add -D ${peerDeps.join(' ')}`;
  const peersDevDepsCmd = pm === 'npm' ? `npm install -D ${peerDevDeps.join(' ')}` : `${pm} add -D ${peerDevDeps.join(' ')}`;
  
  await modifyPackageJsonFile('./package.json', {
    // todo use modify-json-file to add useful package.json devDependencies
    // devDependencies: d => {
    //   console.log(d);
    //   return d;
    // },
    scripts: s => {
      delete s['vitest:init'];
      delete s['vitest:install-peers'];
      delete s['vitest:peers-devDeps'];
      delete s['vitest:peers-deps'];
      s.test = 'vitest';
      s['vitest:w'] = ` ${pm} run vitest-watch`;
      // test-app: is to make sure we are invoking the correct app
      s['vitest:test-app:clean'] = `cd ${resolve(paths.CWD, 'tests/helpers/harness/test-app')}; rm -rfv dist; rm -fv tsconfig.tsbuildinfo; rm -fv node_modules; rm -rfv .cache &&  echo ' ✨  Done cleaning test-app, run tests, develop, console or start to rebuild ✓'`;
      s['vitest:test-app:develop'] = `cd ${resolve(paths.CWD, 'tests/helpers/harness/test-app')} && ${pm} run test-app:develop`;
      s['vitest:test-app:start'] = `cd ${resolve(paths.CWD, 'tests/helpers/harness/test-app')} && ${pm} run test-app:start`;
      s['vitest:test-app:console'] = `cd ${resolve(paths.CWD, 'tests/helpers/harness/test-app')} && ${pm} run test-app:console`;
      s['vitest:test-app:diag'] = `cd ${resolve(paths.CWD, 'tests/helpers/harness/test-app')} && NODE_ENV=test ${pm} run test-app:start`;
      s['vitest:diag'] = `NODE_ENV=test ${pm} run strapi start`;
      if (peerDevDeps.length > 0) s['vitest:peers-devDeps'] = peersDevDepsCmd;
      if (peerDeps.length > 0) s['vitest:peers-deps'] = peersDepsCmd;
      return s;
    },
  });
  
  console.info('\n');
  log_warn(`Please run package.json script(s):`);
  if (peerDeps.length > 0) {
    console.info(`   %o to update required packages in your project's %o`, 'vitest:peers-deps', 'dependencies');
  }
  if (peerDevDeps.length > 0) {
    console.info(`   %o to add/update required packages in your project's %o`, 'vitest:peers-devDeps', 'devDependencies');
  }
  console.info(chalk.dim`      - You can edit the scripts in your "package.json" file.\n      - If you remove any packages from that script, be sure to edit the harness for the ones you remove where the packages are used.`);
}


initTestHarness().then(() => {
  console.info('\n');
  log(`✨ Done initializing ${pkg.name} harness 🚀, read & finish minor required config before use.`);
});



function ensureDependenciesProps (pkg) {
  if (!pkg.dependencies) pkg.dependencies = {};
  if (!pkg.devDependencies) pkg.devDependencies = {};
  if (!pkg.peerDependencies) pkg.peerDependencies = {};
}
